name: üîí Protect Authentication Patterns

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/stores/**'
      - 'src/utils/sessionManager.ts'
      - 'src/api/auth-api.ts'
      - 'src/types/index.ts'
      - 'tests/**'

jobs:
  critical-auth-tests:
    name: üö® Critical Authentication Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 9.0.0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: üîí CRITICAL - API Contract Tests
      run: |
        echo "Running CRITICAL API contract tests..."
        pnpm run test:contracts --reporter=verbose
      env:
        CI: true

    - name: üîí CRITICAL - Session Management Tests
      run: |
        echo "Running CRITICAL session management tests..."
        pnpm vitest run tests/utils/storageManager.test.ts --reporter=verbose
      env:
        CI: true

    - name: üîí CRITICAL - Auth Store Tests
      run: |
        echo "Running CRITICAL auth store tests..."
        pnpm vitest run tests/stores/auth-store.test.ts --reporter=verbose
      env:
        CI: true

    - name: Generate test coverage report
      run: |
        pnpm run test:coverage
        echo "## üîí Authentication Test Coverage" >> $GITHUB_STEP_SUMMARY
        echo "Critical authentication patterns are protected by comprehensive tests." >> $GITHUB_STEP_SUMMARY

  api-compatibility-check:
    name: üîÑ API Compatibility Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 9.0.0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Check API response format compatibility
      run: |
        echo "Checking API response format compatibility..."
        
        # Check if signInWithPasskey handles both response formats
        if ! grep -q "response.step === 'success'" src/stores/auth-store.ts; then
          echo "‚ùå CRITICAL: Legacy response format support missing!"
          echo "   signInWithPasskey must handle {step: 'success', ...} format"
          exit 1
        fi
        
        if ! grep -q "response.*success" src/stores/auth-store.ts; then
          echo "‚ùå CRITICAL: New response format support missing!"
          echo "   signInWithPasskey must handle {success: true, ...} format"
          exit 1
        fi
        
        echo "‚úÖ API response format compatibility verified"

    - name: Check session storage key consistency
      run: |
        echo "Checking session storage key consistency..."

        # Verify sessionManager uses the main storage key
        STORAGE_KEY="thepia_auth_session"

        if ! grep -q "$STORAGE_KEY" src/utils/sessionManager.ts; then
          echo "‚ùå CRITICAL: sessionManager not using consistent storage key!"
          exit 1
        fi

        # Verify auth-state-machine uses legacy storage keys (different pattern but consistent)
        if ! grep -q "auth_access_token" src/stores/auth-state-machine.ts; then
          echo "‚ùå CRITICAL: auth-state-machine not using expected storage keys!"
          exit 1
        fi

        echo "‚úÖ Session storage key consistency verified"

  build-and-integration:
    name: üèóÔ∏è Build & Integration
    runs-on: ubuntu-latest
    needs: [critical-auth-tests, api-compatibility-check]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 9.0.0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Build flows-auth
      run: pnpm build

    - name: Verify exports
      run: |
        echo "Verifying critical exports are available..."
        node -e "
          const flowsAuth = require('./dist/index.cjs');
          const requiredExports = [
            'createAuthStore',
            'configureSessionStorage', 
            'getOptimalSessionConfig',
            'isAuthenticatedFromSession',
            'getCurrentUserFromSession'
          ];
          
          for (const exportName of requiredExports) {
            if (!flowsAuth[exportName]) {
              console.error(\`‚ùå CRITICAL: Missing export \${exportName}\`);
              process.exit(1);
            }
          }
          
          console.log('‚úÖ All critical exports verified');
        "

    - name: Integration test with flows.thepia.net
      run: |
        echo "Testing integration with flows.thepia.net..."
        
        # Simulate the integration by checking package.json compatibility
        if [ -f "../flows.thepia.net/package.json" ]; then
          echo "‚úÖ flows.thepia.net integration ready"
        else
          echo "‚ö†Ô∏è flows.thepia.net not found for integration test"
        fi

  security-audit:
    name: üõ°Ô∏è Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 9.0.0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run security audit
      run: pnpm audit || true  # Don't fail on audit issues for now

    - name: Check for sensitive data exposure
      run: |
        echo "Checking for sensitive data exposure..."
        
        # Check that credentials are not logged
        if grep -r "console.log.*credential" src/ --exclude-dir=tests; then
          echo "‚ùå SECURITY: Credential data may be logged!"
          exit 1
        fi
        
        # Check that tokens are not logged in full
        if grep -r "console.log.*accessToken.*:" src/ --exclude-dir=tests; then
          echo "‚ùå SECURITY: Access tokens may be logged!"
          exit 1
        fi
        
        echo "‚úÖ Security audit passed"
