/**
 * Bundle Types Script
 * 
 * Bundles all type exports from src/types/ into a single dist/types.ts file
 * with explicit .ts extensions for Deno compatibility.
 * 
 * This allows consumers to import from @thepia/flows-auth/types without
 * extension issues across TypeScript, Deno, and Node environments.
 */

import { readFileSync, writeFileSync, mkdirSync } from 'node:fs';
import { resolve, dirname } from 'node:path';

const srcTypesDir = resolve(__dirname, '../src/types');
const distDir = resolve(__dirname, '../dist');
const outputFile = resolve(distDir, 'types.ts');

// Ensure dist directory exists
mkdirSync(distDir, { recursive: true });

// Read the main types index file
const indexPath = resolve(srcTypesDir, 'index.ts');
const indexContent = readFileSync(indexPath, 'utf-8');

// Transform the content to use explicit .ts extensions
let bundledContent = indexContent
  // Fix relative imports without .ts extensions
  .replace(/from ['"]\.\/([^'"]+)(?<!\.ts)['"]/g, "from './$1.ts'")
  .replace(/from ['"]\.\.\/([^'"]+)(?<!\.ts)['"]/g, "from '../$1.ts'")
  // Fix imports from utils and other directories
  .replace(/from ['"]\.\.\/utils\/([^'"]+)(?<!\.ts)['"]/g, "from '../utils/$1.ts'")
  .replace(/from ['"]\.\.\/paraglide\/([^'"]+)(?<!\.js)['"]/g, "from '../paraglide/$1.js'");

// Add a header comment
const header = `/**
 * Bundled Type Definitions for flows-auth
 * 
 * This file consolidates all type exports from src/types/ into a single
 * source file with explicit .ts extensions for Deno compatibility.
 * 
 * Generated by scripts/bundle-types.ts
 * Do not edit manually - regenerate by running: pnpm build
 */

`;

// Write the bundled types file
writeFileSync(outputFile, header + bundledContent, 'utf-8');

console.log('âœ… Bundled types to dist/types.ts');
console.log(`   - Fixed ${(bundledContent.match(/\.ts['"]$/gm) || []).length} import extensions`);

