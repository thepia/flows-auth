/**
 * Inline Types Script
 * 
 * Creates a fully self-contained types file by inlining all type definitions
 * from src/types/ into a single dist/types.ts file with no external imports.
 */

import { readFileSync, writeFileSync, mkdirSync, readdirSync } from 'node:fs';
import { resolve, extname } from 'node:path';

const srcTypesDir = resolve(__dirname, '../src/types');
const distDir = resolve(__dirname, '../dist');
const outputFile = resolve(distDir, 'types.ts');

mkdirSync(distDir, { recursive: true });

// Read all .ts files from src/types and extract only type definitions
function extractTypeDefinitions(dir: string, visited = new Set<string>()): string[] {
  const definitions: string[] = [];
  const files = readdirSync(dir);

  for (const file of files) {
    if (!file.endsWith('.ts') || file === 'index.ts') continue;

    const filePath = resolve(dir, file);
    if (visited.has(filePath)) continue;
    visited.add(filePath);

    const content = readFileSync(filePath, 'utf-8');
    
    // Extract only export statements and type definitions
    const lines = content.split('\n');
    for (const line of lines) {
      // Skip imports
      if (line.trim().startsWith('import ')) continue;
      // Keep exports and type definitions
      if (line.trim().startsWith('export ') || 
          line.trim().startsWith('interface ') ||
          line.trim().startsWith('type ') ||
          line.trim().startsWith('enum ') ||
          line.trim().startsWith('const ') ||
          line.trim() === '' ||
          line.trim().startsWith('//')) {
        definitions.push(line);
      }
    }
    definitions.push('');
  }

  return definitions;
}

const header = `/**
 * Bundled Type Definitions for flows-auth
 * 
 * This file contains all type exports from flows-auth in a single,
 * self-contained file with explicit .ts extensions for Deno compatibility.
 * 
 * Generated by scripts/inline-types.ts - do not edit manually
 */

`;

// Read main index file and extract exports
const indexPath = resolve(srcTypesDir, 'index.ts');
const indexContent = readFileSync(indexPath, 'utf-8');

// Extract all export statements from index
const exportLines = indexContent
  .split('\n')
  .filter(line => line.trim().startsWith('export '))
  .map(line => line.replace(/from ['"][^'"]+['"]/g, '')) // Remove import paths
  .filter(line => line.trim().length > 0);

const bundledContent = header + exportLines.join('\n');

writeFileSync(outputFile, bundledContent, 'utf-8');
writeFileSync(resolve(distDir, 'types.d.ts'), bundledContent, 'utf-8');

console.log('âœ… Generated self-contained types files');
console.log(`   - dist/types.ts (${bundledContent.length} bytes)`);
console.log(`   - dist/types.d.ts`);

